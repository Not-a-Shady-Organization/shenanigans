#!/usr/bin/env python

from subprocess import check_output
import requests
from bs4 import BeautifulSoup
import sys
import youtube_dl
import click



@click.command()
@click.argument('search_terms', nargs=-1)
@click.option('--creative-commons', is_flag=True)
@click.option('--res-4k', is_flag=True)
@click.option('--res-HD', is_flag=True)
def search_and_download(search_terms, creative_commons, res_4k, res_hd):
    '''This script searchs for videos Youtube for Creative Commons which match the given terms, then downloads them.'''

    base_url = 'https://www.youtube.com/results?search_query='

    creative_commons_filter = '&sp=EgIwAQ%253D%253D'
    resolution_4k_filter = '&sp=EgJwAQ%253D%253D'
    creative_commons_4k_filter = '&sp=EgQwAXAB'
    resolution_HD_filter = '&sp=EgIgAQ%253D%253D'
    creative_commons_HD_filter = '&sp=EgQgATAB'

    url = base_url + '+'.join(search_terms)
    if creative_commons:
        url += creative_commons_filter
    if res_4k:
        url += resolution_4k_filter
    if res_hd:
        url += resolution_HD_filter
    if creative_commons and res_4k:
        url += creative_commons_4k_filter
    if creative_commons and res_hd:
        url += creative_commons_HD_filter

    page = requests.get(url)

    soup = BeautifulSoup(page.content, 'html.parser')
    result_videos = soup.select('.yt-lockup-title')
    video_urls = []
    for result_video in result_videos:
        result_title_element = result_video.find('a')
        title = result_title_element['title']
        href = result_title_element['href']
        video_urls += ['http://www.youtube.com' + href]

        # Download all videos
        ydl = youtube_dl.YoutubeDL({
            'outtmpl': 'videos/' + '_'.join(search_terms) + '/' + title.replace(' ', '_').replace('"', '').replace("'", ''),
            'playlist': False,
            'logger': Logger()
        })

        with ydl:
            result = ydl.extract_info(url)


class Logger(object):
    def debug(self, msg):
        if '[download]' in msg:
            if 'already' in msg or 'Download' in msg:
                return
            if 'playlist' in msg or 'Destination' in msg:
                print(msg)
            else:
                sys.stdout.write(msg)

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


if __name__ == '__main__':
    search_and_download()
